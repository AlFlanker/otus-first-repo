package com.gmail.alexflanker89.lesson5.dao.repository;import com.gmail.alexflanker89.lesson5.dao.interfaces.AuthorRepository;import com.gmail.alexflanker89.lesson5.domain.Author;import com.gmail.alexflanker89.lesson5.domain.Book;import com.gmail.alexflanker89.lesson5.execptions.AuthorNotExistException;import org.springframework.stereotype.Repository;import org.springframework.transaction.annotation.Transactional;import javax.persistence.EntityManager;import javax.persistence.NoResultException;import java.util.HashSet;import java.util.List;import java.util.Set;@Transactional@SuppressWarnings("JpaQlInspection")@Repositorypublic class AuthorRepositoryJpa extends BaseRepositoryImpl<Author> implements AuthorRepository {    public AuthorRepositoryJpa(EntityManager entityManager) {        super(entityManager);    }    @Transactional(readOnly = true)    @SuppressWarnings("unchecked")    @Override    public List<Author> findByBook(Set<Book> books)  {        try{            return  entityManager.createQuery("select distinct a from Author a inner join a.books b where b in (:books)").setParameter("books", books).getResultList();        }        catch (NoResultException e){            throw new AuthorNotExistException("нет такого автора!");        }    }    @Transactional(readOnly = true)    @SuppressWarnings("unchecked")    @Override    public Set<Author> findByNameAndLastname(String name, String lastname) {        try {            return new HashSet<>(entityManager.createQuery("select distinct a from Author a where a.name = :name and a.lastname = :lastname")                    .setParameter("name", name)                    .setParameter("lastname", lastname)                    .getResultList());        }        catch (NoResultException e){            throw new AuthorNotExistException("нет такого автора!");        }    }}